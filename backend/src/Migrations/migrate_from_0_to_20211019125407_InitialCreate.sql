CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

CREATE SCHEMA IF NOT EXISTS database;

CREATE TYPE public.data_kind AS ENUM ('calorimetric_data', 'hygrothermal_data', 'optical_data', 'photovoltaic_data');
CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE TABLE database.calorimetric_data (
    "Id" uuid NOT NULL DEFAULT (gen_random_uuid()),
    "GValues" double precision[] NOT NULL,
    "UValues" double precision[] NOT NULL,
    "Locale" text NOT NULL,
    "ComponentId" uuid NOT NULL,
    "Name" text NULL,
    "Description" text NULL,
    "Warnings" text[] NOT NULL,
    "CreatorId" uuid NOT NULL,
    "CreatedAt" timestamp without time zone NOT NULL,
    "AppliedMethod_MethodId" uuid NOT NULL,
    CONSTRAINT "PK_calorimetric_data" PRIMARY KEY ("Id")
);

CREATE TABLE database.hygrothermal_data (
    "Id" uuid NOT NULL DEFAULT (gen_random_uuid()),
    "Locale" text NOT NULL,
    "ComponentId" uuid NOT NULL,
    "Name" text NULL,
    "Description" text NULL,
    "Warnings" text[] NOT NULL,
    "CreatorId" uuid NOT NULL,
    "CreatedAt" timestamp without time zone NOT NULL,
    "AppliedMethod_MethodId" uuid NOT NULL,
    CONSTRAINT "PK_hygrothermal_data" PRIMARY KEY ("Id")
);

CREATE TABLE database.optical_data (
    "Id" uuid NOT NULL DEFAULT (gen_random_uuid()),
    "NearnormalHemisphericalVisibleTransmittances" double precision[] NOT NULL,
    "NearnormalHemisphericalVisibleReflectances" double precision[] NOT NULL,
    "NearnormalHemisphericalSolarTransmittances" double precision[] NOT NULL,
    "NearnormalHemisphericalSolarReflectances" double precision[] NOT NULL,
    "InfraredEmittances" double precision[] NOT NULL,
    "ColorRenderingIndices" double precision[] NOT NULL,
    "Locale" text NOT NULL,
    "ComponentId" uuid NOT NULL,
    "Name" text NULL,
    "Description" text NULL,
    "Warnings" text[] NOT NULL,
    "CreatorId" uuid NOT NULL,
    "CreatedAt" timestamp without time zone NOT NULL,
    "AppliedMethod_MethodId" uuid NOT NULL,
    CONSTRAINT "PK_optical_data" PRIMARY KEY ("Id")
);

CREATE TABLE database.photovoltaic_data (
    "Id" uuid NOT NULL DEFAULT (gen_random_uuid()),
    "Locale" text NOT NULL,
    "ComponentId" uuid NOT NULL,
    "Name" text NULL,
    "Description" text NULL,
    "Warnings" text[] NOT NULL,
    "CreatorId" uuid NOT NULL,
    "CreatedAt" timestamp without time zone NOT NULL,
    "AppliedMethod_MethodId" uuid NOT NULL,
    CONSTRAINT "PK_photovoltaic_data" PRIMARY KEY ("Id")
);

CREATE TABLE database."calorimetric_data_Approvals" (
    "CalorimetricDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Timestamp" timestamp without time zone NOT NULL,
    "Signature" text NOT NULL,
    "KeyFingerprint" text NOT NULL,
    "Query" text NOT NULL,
    "Response" text NOT NULL,
    "ApproverId" uuid NOT NULL,
    CONSTRAINT "PK_calorimetric_data_Approvals" PRIMARY KEY ("CalorimetricDataId", "Id"),
    CONSTRAINT "FK_calorimetric_data_Approvals_calorimetric_data_CalorimetricD~" FOREIGN KEY ("CalorimetricDataId") REFERENCES database.calorimetric_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."calorimetric_data_Arguments" (
    "AppliedMethodCalorimetricDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value" jsonb NOT NULL,
    CONSTRAINT "PK_calorimetric_data_Arguments" PRIMARY KEY ("AppliedMethodCalorimetricDataId", "Id"),
    CONSTRAINT "FK_calorimetric_data_Arguments_calorimetric_data_AppliedMethod~" FOREIGN KEY ("AppliedMethodCalorimetricDataId") REFERENCES database.calorimetric_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."calorimetric_data_Sources" (
    "AppliedMethodCalorimetricDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value_DataId" uuid NOT NULL,
    "Value_DataTimestamp" timestamp without time zone NOT NULL,
    "Value_DataKind" data_kind NOT NULL,
    "Value_DatabaseId" uuid NOT NULL,
    CONSTRAINT "PK_calorimetric_data_Sources" PRIMARY KEY ("AppliedMethodCalorimetricDataId", "Id"),
    CONSTRAINT "FK_calorimetric_data_Sources_calorimetric_data_AppliedMethodCa~" FOREIGN KEY ("AppliedMethodCalorimetricDataId") REFERENCES database.calorimetric_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."hygrothermal_data_Approvals" (
    "HygrothermalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Timestamp" timestamp without time zone NOT NULL,
    "Signature" text NOT NULL,
    "KeyFingerprint" text NOT NULL,
    "Query" text NOT NULL,
    "Response" text NOT NULL,
    "ApproverId" uuid NOT NULL,
    CONSTRAINT "PK_hygrothermal_data_Approvals" PRIMARY KEY ("HygrothermalDataId", "Id"),
    CONSTRAINT "FK_hygrothermal_data_Approvals_hygrothermal_data_HygrothermalD~" FOREIGN KEY ("HygrothermalDataId") REFERENCES database.hygrothermal_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."hygrothermal_data_Arguments" (
    "AppliedMethodHygrothermalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value" jsonb NOT NULL,
    CONSTRAINT "PK_hygrothermal_data_Arguments" PRIMARY KEY ("AppliedMethodHygrothermalDataId", "Id"),
    CONSTRAINT "FK_hygrothermal_data_Arguments_hygrothermal_data_AppliedMethod~" FOREIGN KEY ("AppliedMethodHygrothermalDataId") REFERENCES database.hygrothermal_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."hygrothermal_data_Sources" (
    "AppliedMethodHygrothermalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value_DataId" uuid NOT NULL,
    "Value_DataTimestamp" timestamp without time zone NOT NULL,
    "Value_DataKind" data_kind NOT NULL,
    "Value_DatabaseId" uuid NOT NULL,
    CONSTRAINT "PK_hygrothermal_data_Sources" PRIMARY KEY ("AppliedMethodHygrothermalDataId", "Id"),
    CONSTRAINT "FK_hygrothermal_data_Sources_hygrothermal_data_AppliedMethodHy~" FOREIGN KEY ("AppliedMethodHygrothermalDataId") REFERENCES database.hygrothermal_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."CielabColor" (
    "OpticalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "LStar" double precision NOT NULL,
    "AStar" double precision NOT NULL,
    "BStar" double precision NOT NULL,
    CONSTRAINT "PK_CielabColor" PRIMARY KEY ("OpticalDataId", "Id"),
    CONSTRAINT "FK_CielabColor_optical_data_OpticalDataId" FOREIGN KEY ("OpticalDataId") REFERENCES database.optical_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."optical_data_Approvals" (
    "OpticalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Timestamp" timestamp without time zone NOT NULL,
    "Signature" text NOT NULL,
    "KeyFingerprint" text NOT NULL,
    "Query" text NOT NULL,
    "Response" text NOT NULL,
    "ApproverId" uuid NOT NULL,
    CONSTRAINT "PK_optical_data_Approvals" PRIMARY KEY ("OpticalDataId", "Id"),
    CONSTRAINT "FK_optical_data_Approvals_optical_data_OpticalDataId" FOREIGN KEY ("OpticalDataId") REFERENCES database.optical_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."optical_data_Arguments" (
    "AppliedMethodOpticalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value" jsonb NOT NULL,
    CONSTRAINT "PK_optical_data_Arguments" PRIMARY KEY ("AppliedMethodOpticalDataId", "Id"),
    CONSTRAINT "FK_optical_data_Arguments_optical_data_AppliedMethodOpticalDat~" FOREIGN KEY ("AppliedMethodOpticalDataId") REFERENCES database.optical_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."optical_data_Sources" (
    "AppliedMethodOpticalDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value_DataId" uuid NOT NULL,
    "Value_DataTimestamp" timestamp without time zone NOT NULL,
    "Value_DataKind" data_kind NOT NULL,
    "Value_DatabaseId" uuid NOT NULL,
    CONSTRAINT "PK_optical_data_Sources" PRIMARY KEY ("AppliedMethodOpticalDataId", "Id"),
    CONSTRAINT "FK_optical_data_Sources_optical_data_AppliedMethodOpticalDataId" FOREIGN KEY ("AppliedMethodOpticalDataId") REFERENCES database.optical_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database.get_https_resource (
    "Id" uuid NOT NULL DEFAULT (gen_random_uuid()),
    "Description" text NOT NULL,
    "HashValue" text NOT NULL,
    "DataFormatId" uuid NOT NULL,
    "CalorimetricDataId" uuid NULL,
    "HygrothermalDataId" uuid NULL,
    "OpticalDataId" uuid NULL,
    "PhotovoltaicDataId" uuid NULL,
    "ParentId" uuid NULL,
    "AppliedConversionMethod_MethodId" uuid NULL,
    "AppliedConversionMethod_SourceName" text NULL,
    CONSTRAINT "PK_get_https_resource" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_get_https_resource_calorimetric_data_CalorimetricDataId" FOREIGN KEY ("CalorimetricDataId") REFERENCES database.calorimetric_data ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_get_https_resource_get_https_resource_ParentId" FOREIGN KEY ("ParentId") REFERENCES database.get_https_resource ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_get_https_resource_hygrothermal_data_HygrothermalDataId" FOREIGN KEY ("HygrothermalDataId") REFERENCES database.hygrothermal_data ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_get_https_resource_optical_data_OpticalDataId" FOREIGN KEY ("OpticalDataId") REFERENCES database.optical_data ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_get_https_resource_photovoltaic_data_PhotovoltaicDataId" FOREIGN KEY ("PhotovoltaicDataId") REFERENCES database.photovoltaic_data ("Id") ON DELETE RESTRICT
);

CREATE TABLE database."photovoltaic_data_Approvals" (
    "PhotovoltaicDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Timestamp" timestamp without time zone NOT NULL,
    "Signature" text NOT NULL,
    "KeyFingerprint" text NOT NULL,
    "Query" text NOT NULL,
    "Response" text NOT NULL,
    "ApproverId" uuid NOT NULL,
    CONSTRAINT "PK_photovoltaic_data_Approvals" PRIMARY KEY ("PhotovoltaicDataId", "Id"),
    CONSTRAINT "FK_photovoltaic_data_Approvals_photovoltaic_data_PhotovoltaicD~" FOREIGN KEY ("PhotovoltaicDataId") REFERENCES database.photovoltaic_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."photovoltaic_data_Arguments" (
    "AppliedMethodPhotovoltaicDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value" jsonb NOT NULL,
    CONSTRAINT "PK_photovoltaic_data_Arguments" PRIMARY KEY ("AppliedMethodPhotovoltaicDataId", "Id"),
    CONSTRAINT "FK_photovoltaic_data_Arguments_photovoltaic_data_AppliedMethod~" FOREIGN KEY ("AppliedMethodPhotovoltaicDataId") REFERENCES database.photovoltaic_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."photovoltaic_data_Sources" (
    "AppliedMethodPhotovoltaicDataId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value_DataId" uuid NOT NULL,
    "Value_DataTimestamp" timestamp without time zone NOT NULL,
    "Value_DataKind" data_kind NOT NULL,
    "Value_DatabaseId" uuid NOT NULL,
    CONSTRAINT "PK_photovoltaic_data_Sources" PRIMARY KEY ("AppliedMethodPhotovoltaicDataId", "Id"),
    CONSTRAINT "FK_photovoltaic_data_Sources_photovoltaic_data_AppliedMethodPh~" FOREIGN KEY ("AppliedMethodPhotovoltaicDataId") REFERENCES database.photovoltaic_data ("Id") ON DELETE CASCADE
);

CREATE TABLE database."FileMetaInformation" (
    "GetHttpsResourceId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Path" text[] NOT NULL,
    "DataFormatId" uuid NOT NULL,
    CONSTRAINT "PK_FileMetaInformation" PRIMARY KEY ("GetHttpsResourceId", "Id"),
    CONSTRAINT "FK_FileMetaInformation_get_https_resource_GetHttpsResourceId" FOREIGN KEY ("GetHttpsResourceId") REFERENCES database.get_https_resource ("Id") ON DELETE CASCADE
);

CREATE TABLE database."get_https_resource_Arguments" (
    "ToTreeVertexAppliedConversionMethodGetHttpsResourceId" uuid NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Value" jsonb NOT NULL,
    CONSTRAINT "PK_get_https_resource_Arguments" PRIMARY KEY ("ToTreeVertexAppliedConversionMethodGetHttpsResourceId", "Id"),
    CONSTRAINT "FK_get_https_resource_Arguments_get_https_resource_ToTreeVerte~" FOREIGN KEY ("ToTreeVertexAppliedConversionMethodGetHttpsResourceId") REFERENCES database.get_https_resource ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_get_https_resource_CalorimetricDataId" ON database.get_https_resource ("CalorimetricDataId");

CREATE INDEX "IX_get_https_resource_HygrothermalDataId" ON database.get_https_resource ("HygrothermalDataId");

CREATE INDEX "IX_get_https_resource_OpticalDataId" ON database.get_https_resource ("OpticalDataId");

CREATE INDEX "IX_get_https_resource_ParentId" ON database.get_https_resource ("ParentId");

CREATE INDEX "IX_get_https_resource_PhotovoltaicDataId" ON database.get_https_resource ("PhotovoltaicDataId");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20211019125407_InitialCreate', '5.0.10');

COMMIT;

