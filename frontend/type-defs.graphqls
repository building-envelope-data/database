schema {
  query: Query
  mutation: Mutation
}

interface Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  locale: Locale!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface Reference {
  abstract: String
  section: String
  title: String
}

type Address {
  formatted: String!
}

type AppliedMethod {
  arguments: [NamedMethodArgument!]!
  methodId: Uuid!
  sources: [NamedMethodSource!]!
}

type CalorimetricData implements Node & Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  gValues: [Float!]!
  id: ID!
  locale: Locale!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  uValues: [Float!]!
  warnings: [String!]!
}

"A connection to a list of items."
type CalorimetricDataConnection {
  "A list of edges."
  edges: [CalorimetricDataEdge!]
  "A flattened list of the nodes."
  nodes: [CalorimetricData!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type CalorimetricDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CalorimetricData!
}

type CielabColor {
  aStar: Float!
  bStar: Float!
  lStar: Float!
}

type CreateCalorimetricDataError {
  code: CreateCalorimetricDataErrorCode!
  message: String!
  path: [String!]!
}

type CreateCalorimetricDataPayload {
  calorimetricData: CalorimetricData
  errors: [CreateCalorimetricDataError!]
  query: Query!
}

type CreateGetHttpsResourceError {
  code: CreateGetHttpsResourceErrorCode!
  message: String!
  path: [String!]!
}

type CreateGetHttpsResourcePayload {
  errors: [CreateGetHttpsResourceError!]
  getHttpsResource: GetHttpsResource
  query: Query!
}

type CreateHygrothermalDataError {
  code: CreateHygrothermalDataErrorCode!
  message: String!
  path: [String!]!
}

type CreateHygrothermalDataPayload {
  errors: [CreateHygrothermalDataError!]
  hygrothermalData: HygrothermalData
  query: Query!
}

type CreateOpticalDataError {
  code: CreateOpticalDataErrorCode!
  message: String!
  path: [String!]!
}

type CreateOpticalDataPayload {
  errors: [CreateOpticalDataError!]
  opticalData: OpticalData
  query: Query!
}

type CreatePhotovoltaicDataError {
  code: CreatePhotovoltaicDataErrorCode!
  message: String!
  path: [String!]!
}

type CreatePhotovoltaicDataPayload {
  errors: [CreatePhotovoltaicDataError!]
  photovoltaicData: PhotovoltaicData
  query: Query!
}

type CreateGeometricDataError {
  code: CreateGeometricDataErrorCode!
  message: String!
  path: [String!]!
}

type CreateGeometricDataPayload {
  geometricData: GeometricData
  errors: [CreateGeometricDataError!]
  query: Query!
}

type CrossDatabaseDataReference {
  databaseId: Uuid!
  dataId: Uuid!
  dataKind: DataKind!
  dataTimestamp: DateTime!
}

type DataApproval {
  approverId: Uuid!
  keyFingerprint: String!
  query: String!
  response: String!
  signature: String!
  statement: Reference
  timestamp: DateTime!
}

"A connection to a list of items."
type DataConnection {
  "A list of edges."
  edges: [DataEdge!]
  "A flattened list of the nodes."
  nodes: [Data!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type DataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Data!
}

type GeometricData implements Node & Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  id: ID!
  locale: Locale!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  thicknesses: [Float!]!
  warnings: [String!]!
}

"A connection to a list of items."
type GeometricDataConnection {
  "A list of edges."
  edges: [GeometricDataEdge!]
  "A flattened list of the nodes."
  nodes: [GeometricData!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type GeometricDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GeometricData!
}

type Database {
  canCurrentUserUpdateNode: Boolean!
  canCurrentUserVerifyNode: Boolean!
  description: String!
  locator: Url!
  name: String!
  uuid: Uuid!
  verificationCode: String!
  verificationState: DatabaseVerificationState!
}

type FileMetaInformation {
  dataFormatId: Uuid!
  path: [String!]!
}

type GetHttpsResource implements Node {
  appliedConversionMethod: ToTreeVertexAppliedConversionMethod
  archivedFilesMetaInformation: [FileMetaInformation!]!
  children: [GetHttpsResource!]!
  data: Data
  dataFormatId: Uuid!
  description: String!
  hashValue: String!
  id: ID!
  locator: Url!
  parent: GetHttpsResource
  uuid: Uuid!
}

"A connection to a list of items."
type GetHttpsResourceConnection {
  "A list of edges."
  edges: [GetHttpsResourceEdge!]
  "A flattened list of the nodes."
  nodes: [GetHttpsResource!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type GetHttpsResourceEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: GetHttpsResource!
}

type GetHttpsResourceTree {
  nonRootVertices: [GetHttpsResourceTreeNonRootVertex!]!
  root: GetHttpsResourceTreeRoot!
}

type GetHttpsResourceTreeNonRootVertex {
  appliedConversionMethod: ToTreeVertexAppliedConversionMethod!
  parentId: ID!
  value: GetHttpsResource!
  vertexId: ID!
}

type GetHttpsResourceTreeRoot {
  value: GetHttpsResource!
  vertexId: ID!
}

type HygrothermalData implements Node & Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  id: ID!
  locale: Locale!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

"A connection to a list of items."
type HygrothermalDataConnection {
  "A list of edges."
  edges: [HygrothermalDataEdge!]
  "A flattened list of the nodes."
  nodes: [HygrothermalData!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type HygrothermalDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: HygrothermalData!
}

type Mutation {
  createCalorimetricData(input: CreateCalorimetricDataInput!): CreateCalorimetricDataPayload!
  createGetHttpsResource(input: CreateGetHttpsResourceInput!): CreateGetHttpsResourcePayload!
  createHygrothermalData(input: CreateHygrothermalDataInput!): CreateHygrothermalDataPayload!
  createOpticalData(input: CreateOpticalDataInput!): CreateOpticalDataPayload!
  createPhotovoltaicData(input: CreatePhotovoltaicDataInput!): CreatePhotovoltaicDataPayload!
  updateDatabase(input: UpdateDatabaseInput!): UpdateDatabasePayload!
  createGeometricData(input: CreateGeometricDataInput!): CreateGeometricDataPayload!
}

type NamedMethodArgument {
  name: String!
  value: Any!
}

type NamedMethodSource {
  name: String!
  value: CrossDatabaseDataReference!
}

type Numeration {
  mainNumber: String!
  prefix: String
  suffix: String
}

type OpenEndedDateTimeRange {
  from: DateTime
  until: DateTime
}

type OpticalData implements Node & Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  cielabColors: [CielabColor!]!
  colorRenderingIndices: [Float!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  id: ID!
  infraredEmittances: [Float!]!
  locale: Locale!
  name: String
  nearnormalHemisphericalSolarReflectances: [Float!]!
  nearnormalHemisphericalSolarTransmittances: [Float!]!
  nearnormalHemisphericalVisibleReflectances: [Float!]!
  nearnormalHemisphericalVisibleTransmittances: [Float!]!
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

"A connection to a list of items."
type OpticalDataConnection {
  "A list of edges."
  edges: [OpticalDataEdge!]
  "A flattened list of the nodes."
  nodes: [OpticalData!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type OpticalDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OpticalData!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type PhotovoltaicData implements Node & Data {
  appliedMethod: AppliedMethod!
  approvals: [DataApproval!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  id: ID!
  locale: Locale!
  name: String
  resources: [GetHttpsResource!]!
  resourceTree: GetHttpsResourceTree!
  timestamp: DateTime!
  uuid: Uuid!
  warnings: [String!]!
}

"A connection to a list of items."
type PhotovoltaicDataConnection {
  "A list of edges."
  edges: [PhotovoltaicDataEdge!]
  "A flattened list of the nodes."
  nodes: [PhotovoltaicData!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type PhotovoltaicDataEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PhotovoltaicData!
}

type Publication implements Reference {
  abstract: String
  "The website arXiv.org is a free and open-access archive for publications. The arXiv identifier can be used to define a publication."
  arXiv: String
  authors: [String!]
  "The Digital Object Identifier (DOI) is a very important persistent identifier for publications. It MUST be defined here if it is available for a publication."
  doi: String
  "Referenced section"
  section: String
  title: String
  "A Uniform Resource Name (URN) can be used to define a publication. TODO: Improve the regex pattern to further restrict the string."
  urn: String
  "If a persistent identifiert like DOI is defined above, this webAdress can define a convenient web address to access the publication. However, if no persistent identifier exist, this web address is the only identifier of this publication. In this case, it is important to choose a web address with a high probability to persist long."
  webAddress: Url
}

type Query {
  allCalorimetricData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [CalorimetricDataSortInput!] timestamp: DateTime where: CalorimetricDataPropositionInput): CalorimetricDataConnection
  allData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [IDataSortInput!] timestamp: DateTime where: DataPropositionInput): DataConnection
  allHygrothermalData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [HygrothermalDataSortInput!] timestamp: DateTime where: HygrothermalDataPropositionInput): HygrothermalDataConnection
  allOpticalData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [OpticalDataSortInput!] timestamp: DateTime where: OpticalDataPropositionInput): OpticalDataConnection
  allPhotovoltaicData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [PhotovoltaicDataSortInput!] timestamp: DateTime where: PhotovoltaicDataPropositionInput): PhotovoltaicDataConnection
  allGeometricData("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int locale: Locale order: [GeometricDataSortInput!] timestamp: DateTime where: GeometricDataPropositionInput): GeometricDataConnection
  calorimetricData(id: Uuid! locale: Locale timestamp: DateTime): CalorimetricData
  currentUser: User
  currentUserInfo: UserInfo
  data(id: Uuid! locale: Locale timestamp: DateTime): Data
  database: Database!
  getHttpsResource(id: Uuid!): GetHttpsResource
  getHttpsResources("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int "Returns the last _n_ elements from the list." last: Int order: [GetHttpsResourceSortInput!] where: GetHttpsResourcePropositionInput): GetHttpsResourceConnection
  hygrothermalData(id: Uuid! locale: Locale timestamp: DateTime): HygrothermalData
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  opticalData(id: Uuid! locale: Locale timestamp: DateTime): OpticalData
  photovoltaicData(id: Uuid! locale: Locale timestamp: DateTime): PhotovoltaicData
  verificationCode: String!
  geometricData(id: Uuid! locale: Locale timestamp: DateTime): GeometricData
}

"`ISO 52022` is an example of the abbreviation of a standardizer and the main number of the identifier."
type Standard implements Reference {
  abstract: String
  locator: Url
  numeration: Numeration!
  "The section of the standard to which the reference refers to."
  section: String
  standardizers: [Standardizer!]!
  title: String
  "It is important to define the year in which the standard was issued because there can be relevant updates of one standard."
  year: Int
}

type ToTreeVertexAppliedConversionMethod {
  arguments: [NamedMethodArgument!]!
  methodId: Uuid!
  sourceName: String!
}

type UpdateDatabaseError {
  code: UpdateDatabaseErrorCode!
  message: String!
  path: [String!]!
}

type UpdateDatabasePayload {
  database: Database
  errors: [UpdateDatabaseError!]
  query: Query!
}

type User implements Node {
  id: ID!
  name: String!
  subject: String!
  uuid: Uuid!
}

type UserInfo {
  address: Address
  email: String!
  emailVerified: Boolean!
  name: String!
  phoneNumber: String
  phoneNumberVerified: Boolean!
  roles: [String!]
  sub: String!
  website: String
}

input AppliedMethodInput {
  arguments: [NamedMethodArgumentInput!]!
  methodId: Uuid!
  sources: [NamedMethodSourceInput!]!
}

input AppliedMethodPropositionInput {
  and: [AppliedMethodPropositionInput!]
  or: [AppliedMethodPropositionInput!]
  methodId: UuidPropositionInput
  arguments: ListNamedMethodArgumentFilterTypePropositionInput
  sources: ListFilterInputTypeOfNamedMethodSourcePropositionInput
}

input AppliedMethodSortInput {
  methodId: SortEnumType
}

input BooleanPropositionInput {
  equalTo: Boolean
  notEqualTo: Boolean
}

input CalorimetricDataPropositionInput {
  and: [CalorimetricDataPropositionInput!]
  or: [CalorimetricDataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
  id: UuidPropositionInput
  gValues: FloatsPropositionInput
  uValues: FloatsPropositionInput
}

input CalorimetricDataSortInput {
  locale: SortEnumType
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  id: SortEnumType
  version: SortEnumType
}

input CielabColorInput {
  aStar: Float!
  bStar: Float!
  lStar: Float!
}

input CielabColorPropositionInput {
  and: [CielabColorPropositionInput!]
  or: [CielabColorPropositionInput!]
  lStar: FloatPropositionInput
  aStar: FloatPropositionInput
  bStar: FloatPropositionInput
}

input GeometricDataPropositionInput {
  and: [GeometricDataPropositionInput!]
  or: [GeometricDataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
  id: UuidPropositionInput
  thicknesses: FloatsPropositionInput
}

input CreateCalorimetricDataInput {
  accessToken: String!
  appliedMethod: AppliedMethodInput!
  approvals: [DataApprovalInput!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  gValues: [Float!]!
  locale: String!
  name: String
  rootResource: RootGetHttpsResourceInput!
  uValues: [Float!]!
  warnings: [String!]!
}

input GeometricDataSortInput {
  locale: SortEnumType
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  id: SortEnumType
  version: SortEnumType
}

input CreateGeometricDataInput {
  accessToken: String!
  appliedMethod: AppliedMethodInput!
  approvals: [DataApprovalInput!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  locale: String!
  name: String
  rootResource: RootGetHttpsResourceInput!
  warnings: [String!]!
  thicknesses: [Float!]!
}

input CreateGetHttpsResourceInput {
  accessToken: String!
  appliedConversionMethod: ToTreeVertexAppliedConversionMethodInput
  archivedFilesMetaInformation: [FileMetaInformationInput!]!
  dataFormatId: Uuid!
  dataId: Uuid!
  dataKind: DataKind!
  description: String!
  hashValue: String!
  parentId: Uuid
}

input CreateHygrothermalDataInput {
  accessToken: String!
  appliedMethod: AppliedMethodInput!
  approvals: [DataApprovalInput!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  locale: String!
  name: String
  rootResource: RootGetHttpsResourceInput!
  warnings: [String!]!
}

input CreateNumerationInput {
  mainNumber: String!
  prefix: String
  suffix: String
}

input CreateOpticalDataInput {
  accessToken: String!
  appliedMethod: AppliedMethodInput!
  approvals: [DataApprovalInput!]!
  cielabColors: [CielabColorInput!]!
  colorRenderingIndices: [Float!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  infraredEmittances: [Float!]!
  locale: String!
  name: String
  nearnormalHemisphericalSolarReflectances: [Float!]!
  nearnormalHemisphericalSolarTransmittances: [Float!]!
  nearnormalHemisphericalVisibleReflectances: [Float!]!
  nearnormalHemisphericalVisibleTransmittances: [Float!]!
  rootResource: RootGetHttpsResourceInput!
  warnings: [String!]!
}

input CreatePhotovoltaicDataInput {
  accessToken: String!
  appliedMethod: AppliedMethodInput!
  approvals: [DataApprovalInput!]!
  componentId: Uuid!
  createdAt: DateTime!
  creatorId: Uuid!
  description: String
  locale: String!
  name: String
  rootResource: RootGetHttpsResourceInput!
  warnings: [String!]!
}

input CreatePublicationInput {
  abstract: String
  arXiv: String
  authors: [String!]
  doi: String
  section: String
  title: String
  urn: String
  webAddress: Url
}

input CreateStandardInput {
  abstract: String
  locator: Url
  numeration: CreateNumerationInput!
  section: String
  standardizers: [Standardizer!]!
  title: String
  year: Int
}

input CrossDatabaseDataReferenceInput {
  databaseId: Uuid!
  dataId: Uuid!
  dataKind: DataKind!
  dataTimestamp: DateTime!
}

input CrossDatabaseDataReferencePropositionInput {
  and: [CrossDatabaseDataReferencePropositionInput!]
  or: [CrossDatabaseDataReferencePropositionInput!]
  dataId: UuidPropositionInput
  dataTimestamp: DateTimePropositionInput
  dataKind: DataKindPropositionInput
  databaseId: UuidPropositionInput
}

input DataApprovalInput {
  approverId: Uuid!
  keyFingerprint: String!
  publication: CreatePublicationInput
  query: String!
  response: String!
  signature: String!
  standard: CreateStandardInput
  timestamp: DateTime!
}

input DataApprovalPropositionInput {
  and: [DataApprovalPropositionInput!]
  or: [DataApprovalPropositionInput!]
  approverId: UuidPropositionInput
  timestamp: DateTimePropositionInput
  signature: StringPropositionInput
  keyFingerprint: StringPropositionInput
  query: StringPropositionInput
  response: StringPropositionInput
  publication: PublicationPropositionInput
  standard: StandardPropositionInput
  statement: IReferencePropositionInput
}

input DataKindPropositionInput {
  equalTo: DataKind
  notEqualTo: DataKind
  in: [DataKind!]
  notIn: [DataKind!]
}

input DataPropositionInput {
  and: [DataPropositionInput!]
  or: [DataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
}

input DateTimePropositionInput {
  equalTo: DateTime
  notEqualTo: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  greaterThan: DateTime
  notGreaterThan: DateTime
  greaterThanOrEqualTo: DateTime
  notGreaterThanOrEqualTo: DateTime
  lessThan: DateTime
  notLessThan: DateTime
  lessThanOrEqualTo: DateTime
  notLessThanOrEqualTo: DateTime
}

input FileMetaInformationInput {
  dataFormatId: Uuid!
  path: [String!]!
}

input FileMetaInformationPropositionInput {
  and: [FileMetaInformationPropositionInput!]
  or: [FileMetaInformationPropositionInput!]
  path: StringsPropositionInput
  dataFormatId: UuidPropositionInput
}

input FloatPropositionInput {
  equalTo: Float
  notEqualTo: Float
  in: [Float!]
  notIn: [Float!]
  greaterThan: Float
  notGreaterThan: Float
  greaterThanOrEqualTo: Float
  notGreaterThanOrEqualTo: Float
  lessThan: Float
  notLessThan: Float
  lessThanOrEqualTo: Float
  notLessThanOrEqualTo: Float
}

input FloatsPropositionInput {
  all: FloatPropositionInput
  none: FloatPropositionInput
  some: FloatPropositionInput
  any: Boolean
}

input GetHttpsResourcePropositionInput {
  and: [GetHttpsResourcePropositionInput!]
  or: [GetHttpsResourcePropositionInput!]
  id: UuidPropositionInput
  description: StringPropositionInput
  hashValue: StringPropositionInput
  dataFormatId: UuidPropositionInput
  appliedConversionMethod: ToTreeVertexAppliedConversionMethodPropositionInput
  archivedFilesMetaInformation: ListFilterInputTypeOfFileMetaInformationPropositionInput
  dataId: UuidPropositionInput
  parentId: NullableOfUuidPropositionInput
  parent: GetHttpsResourcePropositionInput
}

input GetHttpsResourceSortInput {
  description: SortEnumType
  hashValue: SortEnumType
  dataFormatId: SortEnumType
  dataId: SortEnumType
  data: IDataSortInput
  calorimetricDataId: SortEnumType
  calorimetricData: CalorimetricDataSortInput
  hygrothermalDataId: SortEnumType
  hygrothermalData: HygrothermalDataSortInput
  opticalDataId: SortEnumType
  opticalData: OpticalDataSortInput
  photovoltaicDataId: SortEnumType
  photovoltaicData: PhotovoltaicDataSortInput
  geometricDataId: SortEnumType
  geometricData: GeometricDataSortInput
  parentId: SortEnumType
  appliedConversionMethod: ToTreeVertexAppliedConversionMethodSortInput
  parent: GetHttpsResourceSortInput
  id: SortEnumType
  version: SortEnumType
}

input HygrothermalDataPropositionInput {
  and: [HygrothermalDataPropositionInput!]
  or: [HygrothermalDataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
  id: UuidPropositionInput
}

input HygrothermalDataSortInput {
  locale: SortEnumType
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  id: SortEnumType
  version: SortEnumType
}

input IDataSortInput {
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  locale: SortEnumType
}

input IReferencePropositionInput {
  and: [IReferencePropositionInput!]
  or: [IReferencePropositionInput!]
  title: StringPropositionInput
  abstract: StringPropositionInput
  section: StringPropositionInput
}

input Int32PropositionInput {
  equalTo: Int
  notEqualTo: Int
  in: [Int!]
  notIn: [Int!]
  greaterThan: Int
  notGreaterThan: Int
  greaterThanOrEqualTo: Int
  notGreaterThanOrEqualTo: Int
  lessThan: Int
  notLessThan: Int
  lessThanOrEqualTo: Int
  notLessThanOrEqualTo: Int
}

input ListFilterInputTypeOfCielabColorPropositionInput {
  all: CielabColorPropositionInput
  none: CielabColorPropositionInput
  some: CielabColorPropositionInput
  any: Boolean
}

input ListFilterInputTypeOfDataApprovalPropositionInput {
  all: DataApprovalPropositionInput
  none: DataApprovalPropositionInput
  some: DataApprovalPropositionInput
  any: Boolean
}

input ListFilterInputTypeOfFileMetaInformationPropositionInput {
  all: FileMetaInformationPropositionInput
  none: FileMetaInformationPropositionInput
  some: FileMetaInformationPropositionInput
  any: Boolean
}

input ListFilterInputTypeOfNamedMethodSourcePropositionInput {
  all: NamedMethodSourcePropositionInput
  none: NamedMethodSourcePropositionInput
  some: NamedMethodSourcePropositionInput
  any: Boolean
}

input ListGetHttpsResourceFilterTypePropositionInput {
  all: GetHttpsResourcePropositionInput
  none: GetHttpsResourcePropositionInput
  some: GetHttpsResourcePropositionInput
  any: Boolean
}

input ListNamedMethodArgumentFilterTypePropositionInput {
  all: NamedMethodArgumentPropositionInput
  none: NamedMethodArgumentPropositionInput
  some: NamedMethodArgumentPropositionInput
  any: Boolean
}

input ListStandardizerPropositionInput {
  all: StandardizerPropositionInput
  none: StandardizerPropositionInput
  some: StandardizerPropositionInput
  any: Boolean
}

input NamedMethodArgumentInput {
  name: String!
  value: Any!
}

input NamedMethodArgumentPropositionInput {
  and: [NamedMethodArgumentPropositionInput!]
  or: [NamedMethodArgumentPropositionInput!]
  name: StringPropositionInput
}

input NamedMethodSourceInput {
  name: String!
  value: CrossDatabaseDataReferenceInput!
}

input NamedMethodSourcePropositionInput {
  and: [NamedMethodSourcePropositionInput!]
  or: [NamedMethodSourcePropositionInput!]
  name: StringPropositionInput
  value: CrossDatabaseDataReferencePropositionInput
}

input NullableOfInt32PropositionInput {
  equalTo: Int
  notEqualTo: Int
  in: [Int]
  notIn: [Int]
  greaterThan: Int
  notGreaterThan: Int
  greaterThanOrEqualTo: Int
  notGreaterThanOrEqualTo: Int
  lessThan: Int
  notLessThan: Int
  lessThanOrEqualTo: Int
  notLessThanOrEqualTo: Int
}

input NullableOfUuidPropositionInput {
  equalTo: Uuid
  notEqualTo: Uuid
  in: [Uuid]
  notIn: [Uuid]
  greaterThan: Uuid
  notGreaterThan: Uuid
  greaterThanOrEqualTo: Uuid
  notGreaterThanOrEqualTo: Uuid
  lessThan: Uuid
  notLessThan: Uuid
  lessThanOrEqualTo: Uuid
  notLessThanOrEqualTo: Uuid
}

input NumerationPropositionInput {
  and: [NumerationPropositionInput!]
  or: [NumerationPropositionInput!]
  prefix: StringPropositionInput
  mainNumber: StringPropositionInput
  suffix: StringPropositionInput
}

input OpticalDataPropositionInput {
  and: [OpticalDataPropositionInput!]
  or: [OpticalDataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
  id: UuidPropositionInput
  nearnormalHemisphericalSolarReflectances: FloatsPropositionInput
  nearnormalHemisphericalSolarTransmittances: FloatsPropositionInput
  nearnormalHemisphericalVisibleReflectances: FloatsPropositionInput
  nearnormalHemisphericalVisibleTransmittances: FloatsPropositionInput
  infraredEmittances: FloatsPropositionInput
  colorRenderingIndices: FloatsPropositionInput
  cielabColors: ListFilterInputTypeOfCielabColorPropositionInput
}

input OpticalDataSortInput {
  locale: SortEnumType
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  id: SortEnumType
  version: SortEnumType
}

input PhotovoltaicDataPropositionInput {
  and: [PhotovoltaicDataPropositionInput!]
  or: [PhotovoltaicDataPropositionInput!]
  locale: StringPropositionInput
  name: StringPropositionInput
  description: StringPropositionInput
  componentId: UuidPropositionInput
  creatorId: UuidPropositionInput
  createdAt: DateTimePropositionInput
  appliedMethod: AppliedMethodPropositionInput
  approvals: ListFilterInputTypeOfDataApprovalPropositionInput
  resources: ListGetHttpsResourceFilterTypePropositionInput
  warnings: StringsPropositionInput
  id: UuidPropositionInput
}

input PhotovoltaicDataSortInput {
  locale: SortEnumType
  componentId: SortEnumType
  name: SortEnumType
  description: SortEnumType
  creatorId: SortEnumType
  createdAt: SortEnumType
  appliedMethod: AppliedMethodSortInput
  id: SortEnumType
  version: SortEnumType
}

input PublicationPropositionInput {
  and: [PublicationPropositionInput!]
  or: [PublicationPropositionInput!]
  authors: StringsPropositionInput
  "The Digital Object Identifier (DOI) is a very important persistent identifier for publications. It MUST be defined here if it is available for a publication."
  doi: StringPropositionInput
  "The website arXiv.org is a free and open-access archive for publications. The arXiv identifier can be used to define a publication."
  arXiv: StringPropositionInput
  "A Uniform Resource Name (URN) can be used to define a publication. TODO: Improve the regex pattern to further restrict the string."
  urn: StringPropositionInput
  "If a persistent identifiert like DOI is defined above, this webAdress can define a convenient web address to access the publication. However, if no persistent identifier exist, this web address is the only identifier of this publication. In this case, it is important to choose a web address with a high probability to persist long."
  webAddress: UriPropositionInput
  title: StringPropositionInput
  abstract: StringPropositionInput
  "Referenced section"
  section: StringPropositionInput
}

input RootGetHttpsResourceInput {
  appliedConversionMethod: ToTreeVertexAppliedConversionMethodInput
  archivedFilesMetaInformation: [FileMetaInformationInput!]!
  dataFormatId: Uuid!
  description: String!
  hashValue: String!
}

"`ISO 52022` is an example of the abbreviation of a standardizer and the main number of the identifier."
input StandardPropositionInput {
  and: [StandardPropositionInput!]
  or: [StandardPropositionInput!]
  "It is important to define the year in which the standard was issued because there can be relevant updates of one standard."
  year: NullableOfInt32PropositionInput
  numeration: NumerationPropositionInput
  standardizers: ListStandardizerPropositionInput
  locator: UriPropositionInput
  title: StringPropositionInput
  abstract: StringPropositionInput
  "The section of the standard to which the reference refers to."
  section: StringPropositionInput
}

input StandardizerPropositionInput {
  equalTo: Standardizer
  notEqualTo: Standardizer
  in: [Standardizer!]
  notIn: [Standardizer!]
}

input StringPropositionInput {
  and: [StringPropositionInput!]
  or: [StringPropositionInput!]
  equalTo: String
  notEqualTo: String
  contains: String
  doesNotContain: String
  in: [String]
  notIn: [String]
  startsWith: String
  doesNotStartWith: String
  endsWith: String
  doesNotEndWith: String
}

input StringsPropositionInput {
  all: StringPropositionInput
  none: StringPropositionInput
  some: StringPropositionInput
  any: Boolean
}

input ToTreeVertexAppliedConversionMethodInput {
  arguments: [NamedMethodArgumentInput!]!
  methodId: Uuid!
  sourceName: String!
}

input ToTreeVertexAppliedConversionMethodPropositionInput {
  and: [ToTreeVertexAppliedConversionMethodPropositionInput!]
  or: [ToTreeVertexAppliedConversionMethodPropositionInput!]
  methodId: UuidPropositionInput
  arguments: ListNamedMethodArgumentFilterTypePropositionInput
  sourceName: StringPropositionInput
}

input ToTreeVertexAppliedConversionMethodSortInput {
  methodId: SortEnumType
  sourceName: SortEnumType
}

input UpdateDatabaseInput {
  databaseId: Uuid!
  description: String!
  locator: Url!
  name: String!
}

input UriHostNameTypePropositionInput {
  equalTo: UriHostNameType
  notEqualTo: UriHostNameType
  in: [UriHostNameType!]
  notIn: [UriHostNameType!]
}

input UriPropositionInput {
  and: [UriPropositionInput!]
  or: [UriPropositionInput!]
  absolutePath: StringPropositionInput
  absoluteUri: StringPropositionInput
  localPath: StringPropositionInput
  authority: StringPropositionInput
  hostNameType: UriHostNameTypePropositionInput
  isDefaultPort: BooleanPropositionInput
  isFile: BooleanPropositionInput
  isLoopback: BooleanPropositionInput
  pathAndQuery: StringPropositionInput
  segments: StringsPropositionInput
  isUnc: BooleanPropositionInput
  host: StringPropositionInput
  port: Int32PropositionInput
  query: StringPropositionInput
  fragment: StringPropositionInput
  scheme: StringPropositionInput
  originalString: StringPropositionInput
  dnsSafeHost: StringPropositionInput
  idnHost: StringPropositionInput
  isAbsoluteUri: BooleanPropositionInput
  userEscaped: BooleanPropositionInput
  userInfo: StringPropositionInput
}

input UuidPropositionInput {
  equalTo: Uuid
  notEqualTo: Uuid
  in: [Uuid!]
  notIn: [Uuid!]
  greaterThan: Uuid
  notGreaterThan: Uuid
  greaterThanOrEqualTo: Uuid
  notGreaterThanOrEqualTo: Uuid
  lessThan: Uuid
  notLessThan: Uuid
  lessThanOrEqualTo: Uuid
  notLessThanOrEqualTo: Uuid
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum CreateCalorimetricDataErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum CreateGetHttpsResourceErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum CreateHygrothermalDataErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum CreateOpticalDataErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum CreatePhotovoltaicDataErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum CreateGeometricDataErrorCode {
  UNKNOWN
  UNAUTHORIZED
}

enum DataKind {
  CALORIMETRIC_DATA
  HYGROTHERMAL_DATA
  OPTICAL_DATA
  PHOTOVOLTAIC_DATA
  GEOMETRIC_DATA
}

enum DatabaseVerificationState {
  PENDING
  VERIFIED
}

enum SortEnumType {
  ASC
  DESC
}

enum Standardizer {
  AERC
  AGI
  ASHRAE
  BREEAM
  BS
  BSI
  CEN
  CIE
  DGNB
  DIN
  DVWG
  IEC
  IES
  IFT
  ISO
  JIS
  LEED
  NFRC
  RIBA
  UL
  UNECE
  VDI
  VFF
  WELL
}

enum UpdateDatabaseErrorCode {
  UNKNOWN
  UNAUTHORIZED
  UNKNOWN_DATABASE
}

enum UriHostNameType {
  UNKNOWN
  BASIC
  DNS
  I_PV4
  I_PV6
}

scalar Any

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"BCP 47 compliant Language Tag string"
scalar Locale

scalar Url

scalar Uuid